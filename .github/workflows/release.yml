name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './cli -> target'

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install frontend dependencies
        run: npm install
        working-directory: ./gui

      - name: Check Tauri icon
        run: |
          if (!(Test-Path ".\gui\src-tauri\icons\icon.ico")) {
            Write-Error "Icon file not found: .\gui\src-tauri\icons\icon.ico"
            exit 1
          }
          Write-Host "Icon file found: .\gui\src-tauri\icons\icon.ico"
        shell: pwsh

      # Build CLI
      - name: Build CLI (release)
        run: cargo build --release -p resonite-manager

      # Build frontend first
      - name: Build Frontend
        run: |
          cd gui
          npm run build
          
      # Build raw executable for portable version
      - name: Build GUI executable (for portable)
        run: |
          cd gui/src-tauri
          cargo build --release --features custom-protocol
          
      # Debug: Check target/release directory contents
      - name: Debug - List target/release contents
        run: |
          Write-Host "=== Checking gui/src-tauri/target/release directory ==="
          if (Test-Path ".\gui\src-tauri\target\release") {
            Write-Host "Directory exists. Contents:"
            Get-ChildItem ".\gui\src-tauri\target\release" -Force | ForEach-Object {
              Write-Host "$($_.Mode) $($_.Length.ToString().PadLeft(10)) $($_.LastWriteTime) $($_.Name)"
            }
            
            Write-Host "`n=== EXE files in release directory ==="
            Get-ChildItem ".\gui\src-tauri\target\release\*.exe" -Force | ForEach-Object {
              Write-Host "Found EXE: $($_.FullName) (Size: $($_.Length) bytes)"
            }
            
            Write-Host "`n=== DLL files in release directory ==="
            Get-ChildItem ".\gui\src-tauri\target\release\*.dll" -Force | ForEach-Object {
              Write-Host "Found DLL: $($_.Name)"
            }
          } else {
            Write-Host "Directory does not exist: .\gui\src-tauri\target\release"
          }
          
          Write-Host "`n=== Checking for bundle directory ==="
          if (Test-Path ".\gui\src-tauri\target\release\bundle") {
            Write-Host "Bundle directory exists"
            Get-ChildItem ".\gui\src-tauri\target\release\bundle" -Directory | ForEach-Object {
              Write-Host "Bundle type: $($_.Name)"
            }
          }
        shell: pwsh
        
      # Build GUI with Tauri
      - name: Build GUI (release)
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          projectPath: ./gui
          tagName: ${{ github.ref_name }}
          releaseName: 'Kokoa Resonite Tools ${{ github.ref_name }}'
          releaseBody: |
            # Kokoa Resonite Tools ${{ github.ref_name }}
            
            ## 📦 ダウンロード
            
            ### GUI版（推奨）
            - **インストーラー**: `Kokoa.Resonite.Tools_${{ github.ref_name }}_x64_en-US.msi` - 自動インストール・更新対応
            - **セットアップEXE**: `Kokoa.Resonite.Tools_${{ github.ref_name }}_x64-setup.exe` - 軽量インストーラー
            - **ポータブル版**: `kokoa-resonite-tools-${{ github.ref_name }}-windows-portable.exe` - インストール不要のシングルバイナリ
            
            ### CLI版
            - **Windows**: `resonite-manager-${{ github.ref_name }}-windows.exe`
            
            ## 🚀 新機能・変更点
            
            このリリースの詳細については、[CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) をご確認ください。
            
            ## 📋 システム要件
            
            - Windows 10/11 (x64)
            - .NET 8.0 Runtime（DepotDownloader用）
            - 十分なディスク容量（Resoniteインストール用）
            
            ## 🔧 使用方法
            
            ### GUI版
            1. **インストーラー版**: `.msi`ファイルをダウンロードして実行
            2. **ポータブル版**: `.exe`ファイルをダウンロードして任意の場所で実行
            3. 初回セットアップガイドに従って設定
            
            ### CLI版
            1. `resonite-manager-${{ github.ref_name }}-windows.exe` をダウンロード
            2. コマンドラインから実行
            
            ## ⚠️ 注意事項
            
            - 初回起動時にDepotDownloaderが自動ダウンロードされます
            - セキュリティソフトが反応する場合がありますが、安全なツールです
            - Steam Guardが有効な場合、初回ダウンロード時に認証が必要です
          releaseDraft: false
          prerelease: false
          includeDebug: false
          includeRelease: true

      # Create additional release assets
      - name: Create CLI Release Asset
        run: |
          cp ./target/release/resonite-manager.exe ./resonite-manager-${{ github.ref_name }}-windows.exe
        
      - name: Create GUI Portable Binary
        run: |
          # Check multiple possible locations for the Tauri executable
          $exeName = "resonite-tools-tauri.exe"
          $paths = @(
            ".\gui\src-tauri\target\release\$exeName",
            ".\gui\src-tauri\target\release\Kokoa Resonite Tools.exe"
          )
          
          $foundExe = $null
          foreach ($path in $paths) {
            if (Test-Path $path) {
              $foundExe = $path
              Write-Host "Found executable at: $path"
              break
            }
          }
          
          if ($foundExe) {
            # Copy the executable
            cp $foundExe ".\kokoa-resonite-tools-${{ github.ref_name }}-windows-portable.exe"
            
            # Also copy the WebView2Loader.dll if it exists
            $webview2Path = ".\gui\src-tauri\target\release\WebView2Loader.dll"
            if (Test-Path $webview2Path) {
              cp $webview2Path ".\WebView2Loader.dll"
              Write-Host "Copied WebView2Loader.dll"
            }
            
            # Create a zip file with both files if WebView2Loader exists
            if (Test-Path ".\WebView2Loader.dll") {
              Compress-Archive -Path ".\kokoa-resonite-tools-${{ github.ref_name }}-windows-portable.exe", ".\WebView2Loader.dll" -DestinationPath ".\kokoa-resonite-tools-${{ github.ref_name }}-windows-portable.zip" -Force
              Write-Host "Created portable zip with executable and WebView2Loader.dll"
            }
          } else {
            Write-Host "Checking available files in target/release directory:"
            Get-ChildItem ".\gui\src-tauri\target\release\" -Filter "*.exe" | ForEach-Object { Write-Host $_.Name }
            Write-Warning "GUI executable not found, skipping portable version"
          }
        shell: pwsh
        
      - name: Upload additional binaries to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./resonite-manager-${{ github.ref_name }}-windows.exe
            ./kokoa-resonite-tools-${{ github.ref_name }}-windows-portable.exe
            ./kokoa-resonite-tools-${{ github.ref_name }}-windows-portable.zip
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}